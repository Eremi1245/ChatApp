[sql]
#from sqlalchemy import Column, Integer, String, create_engine, DateTime, ForeignKey, VARCHAR
#from sqlalchemy.ext.declarative import declarative_base
#from sqlalchemy.orm import relationship

#Base = declarative_base()

class $VAR$(Base):
    __tablename__ = '$VAR$'
    id = Column(Integer, primary_key=True, autoincrement=True)

[ssn]
#from sqlalchemy import create_engine
#from sqlalchemy.orm import sessionmaker,Session

#CONNECT_TO_DB = 'mysql+pymysql://root:1234@localhost/python_chat'

def get_session() -> Session:
    engine = create_engine(CONNECT_TO_DB)
    Session = sessionmaker()
    Session.configure(bind=engine,autoflush=True)
    sess = Session()
    return sess

[alembic]
file_template = %%(year)d-%%(month).2d-%%(day).2d_%%(rev)s_%%(slug)s
#Импорт Base из файла models
target_metadata = Base.metadata

def run_migrations_offline():
    url = CONNECT_TO_DB
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


def run_migrations_online():
    configuration=config.get_section(config.config_ini_section)
    configuration["sqlalchemy.url"]=CONNECT_TO_DB
    connectable = engine_from_config(
        configuration,
        prefix="sqlalchemy.",
        poolclass=pool.NullPool,
    )

    with connectable.connect() as connection:
        context.configure(
            connection=connection, target_metadata=target_metadata,compare_type=True
        )

        with context.begin_transaction():
            context.run_migrations()

